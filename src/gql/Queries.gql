# // Copyright (c) 2023 Contributors to the Suwayomi project
# //
# // This Source Code Form is subject to the terms of the Mozilla Public
# // License, v. 2.0. If a copy of the MPL was not distributed with this
# // file, You can obtain one at http://mozilla.org/MPL/2.0/.

# // This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# // For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

query categories($notEqualTo: Int = null) {
	categories(filter: { id: { notEqualTo: $notEqualTo } }) {
		nodes {
			...CategoryTypeFragment
		}
	}
}

query category($id: Int!) {
	category(id: $id) {
		mangas {
			nodes {
				id
				title
				inLibrary
				thumbnailUrl
				unreadCount
				downloadCount
				latestFetchedChapter {
					fetchedAt
				}
				latestUploadedChapter {
					uploadDate
				}
				latestReadChapter {
					lastReadAt
				}
				chapters {
					totalCount
				}
			}
		}
	}
}

query getManga($id: Int!) {
	manga(id: $id) {
		...MangaTypeFragment
		chapters {
			totalCount
			nodes {
				...ChapterTypeFragment
			}
		}
	}
}

query getSingleChapter($id: Int!) {
	chapter(id: $id) {
		...ChapterTypeFragment
	}
}

query extensions($isNsfw: Boolean = null) {
	extensions(condition: { isNsfw: $isNsfw }) {
		nodes {
			...ExtensionTypeFragment
		}
	}
}

query sources($isNsfw: Boolean = null) {
	sources(condition: { isNsfw: $isNsfw }) {
		nodes {
			...SourceTypeFragment
			isNsfw
			extension {
				pkgName
				repo
			}
		}
	}
}

query sourcesMigration {
	sources {
		nodes {
			...SourceTypeFragment
		}
	}
	mangas(condition: { inLibrary: true }) {
		totalCount
		nodes {
			sourceId
		}
	}
}

query sourceMigrationManga($sourceId: LongString!) {
	mangas(condition: { inLibrary: true, sourceId: $sourceId }) {
		nodes {
			id
			title
			thumbnailUrl
		}
	}
}

query sourceMigrationSource($sourceId: LongString!) {
	source(id: $sourceId) {
		displayName
	}
}

query MangaTitleMigration($id: Int!) {
	manga(id: $id) {
		title
	}
}

query InfoForMigration($id: Int!) {
	manga(id: $id) {
		chapters {
			nodes {
				id
				isRead
				isBookmarked
				chapterNumber
			}
		}
		categories {
			nodes {
				id
			}
		}
	}
}

query metas {
	metas {
		nodes {
			value
			key
		}
	}
}

query updates($offset: Int = 0) {
	chapters(
		orderBy: FETCHED_AT
		offset: $offset
		first: 100
		orderByType: DESC
		filter: { inLibrary: { equalTo: true } }
	) {
		nodes {
			id
			name
			fetchedAt
			isBookmarked
			isDownloaded
			isRead
			manga {
				id
				title
				thumbnailUrl
			}
		}
		pageInfo {
			hasNextPage
		}
	}
}

query chapters($id: Int!) {
	manga(id: $id) {
		id
		title
		meta {
			value
			key
		}
		chapters {
			nodes {
				id
				name
				pageCount
				lastPageRead
				sourceOrder
			}
		}
	}
}

query source($id: LongString!) {
	source(id: $id) {
		displayName
		id
		lang
		name
		supportsLatest
		isConfigurable
		preferences {
			... on CheckBoxPreference {
				CheckBoxCheckBoxCurrentValue: currentValue
				summary
				CheckBoxDefault: default
				key
				CheckBoxTitle: title
			}
			... on EditTextPreference {
				EditTextCurrentValue: currentValue
				EditTextDefault: default
				EditTextTitle: title
				text
				summary
				key
				dialogTitle
				dialogMessage
			}
			... on SwitchPreference {
				SwitchCurrentValue: currentValue
				summary
				key
				SwitchDefault: default
				SwitchTitle: title
			}
			... on MultiSelectListPreference {
				dialogMessage
				dialogTitle
				MultiSelectListTitle: title
				summary
				key
				entryValues
				entries
				MultiSelectListDefault: default
				MultiSelectListCurrentValue: currentValue
			}
			... on ListPreference {
				ListCurrentValue: currentValue
				ListDefault: default
				ListTitle: title
				summary
				key
				entryValues
				entries
			}
		}
		filters {
			... on TriStateFilter {
				__typename
				name
				TriStateDefault: default
			}
			... on CheckBoxFilter {
				__typename
				CheckBoxDefault: default
				name
			}
			... on TextFilter {
				__typename
				name
				TextDefault: default
			}
			... on SortFilter {
				__typename
				values
				name
				SortDefault: default {
					ascending
					index
				}
			}
			... on SeparatorFilter {
				__typename
				name
			}
			... on SelectFilter {
				__typename
				values
				name
				SelectDefault: default
			}
			... on HeaderFilter {
				__typename
				name
			}
			... on GroupFilter {
				__typename
				name
				filters {
					... on TriStateFilter {
						__typename
						name
						TriStateDefault: default
					}
					... on CheckBoxFilter {
						__typename
						CheckBoxDefault: default
						name
					}
					... on TextFilter {
						__typename
						name
						TextDefault: default
					}
					... on SortFilter {
						__typename
						values
						name
						SortDefault: default {
							ascending
							index
						}
					}
					... on SeparatorFilter {
						__typename
						name
					}
					... on SelectFilter {
						__typename
						values
						name
						SelectDefault: default
					}
					... on HeaderFilter {
						__typename
						name
					}
				}
			}
		}
	}
}

query validateBackup($backup: Upload!) {
	validateBackup(input: { backup: $backup }) {
		missingSources {
			id
			name
		}
	}
}

query ConditionalChaptersOfGivenManga(
	$in: [Int!]!
	$isBookmarked: Boolean = null
	$isDownloaded: Boolean = null
	$isRead: Boolean = null
) {
	chapters(
		filter: { mangaId: { in: $in } }
		condition: { isDownloaded: $isDownloaded, isRead: $isRead, isBookmarked: $isBookmarked }
	) {
		nodes {
			id
		}
	}
}

query about {
	aboutServer {
		buildTime
		buildType
		discord
		github
		name
		revision
		version
	}
}

query validateBackup($backup: Upload!) {
	validateBackup(input: { backup: $backup }) {
		missingSources {
			id
			name
		}
	}
}

query restoreStatus($id: String!) {
	restoreStatus(id: $id) {
		mangaProgress
		state
		totalManga
	}
}

query trackers($isLoggedIn: Boolean = null) {
	trackers(condition: { isLoggedIn: $isLoggedIn }) {
		nodes {
			...TrackerTypeFragment
		}
	}
}

query searchTracker($query: String!, $trackerId: Int!) {
	searchTracker(input: { query: $query, trackerId: $trackerId }) {
		trackSearches {
			coverUrl
			publishingStatus
			publishingType
			startDate
			summary
			title
			totalChapters
			trackingUrl
			trackerId
			remoteId
		}
	}
}

query trackRecords {
	trackRecords {
		nodes {
			...TrackRecordTypeFragment
		}
	}
}
