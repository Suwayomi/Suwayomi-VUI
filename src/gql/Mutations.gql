# // Copyright (c) 2023 Contributors to the Suwayomi project
# //
# // This Source Code Form is subject to the terms of the Mozilla Public
# // License, v. 2.0. If a copy of the MPL was not distributed with this
# // file, You can obtain one at http://mozilla.org/MPL/2.0/.

# // This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# // For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

mutation fetchExtensions {
	fetchExtensions(input: {}) {
		extensions {
			...ExtensionTypeFragment
		}
	}
}

mutation updateChapters(
	$ids: [Int!]!
	$isBookmarked: Boolean
	$isRead: Boolean
	$lastPageRead: Int
) {
	updateChapters(
		input: {
			ids: $ids
			patch: { isRead: $isRead, isBookmarked: $isBookmarked, lastPageRead: $lastPageRead }
		}
	) {
		chapters {
			isBookmarked
			isDownloaded
			isRead
			id
		}
	}
}

mutation updateChapter($isRead: Boolean = null, $lastPageRead: Int!, $id: Int!) {
	updateChapter(input: { id: $id, patch: { isRead: $isRead, lastPageRead: $lastPageRead } }) {
		chapter {
			id
			isRead
			lastPageRead
		}
	}
}

mutation updateMangas($ids: [Int!]!, $inLibrary: Boolean!) {
	updateMangas(input: { patch: { inLibrary: $inLibrary }, ids: $ids }) {
		mangas {
			inLibrary
			id
			categories {
				nodes {
					id
				}
			}
		}
	}
}

mutation setGlobalMeta($key: String!, $value: String!) {
	setGlobalMeta(input: { meta: { key: $key, value: $value } }) {
		meta {
			value
			key
		}
	}
}

mutation deleteGlobalMeta($key: String!) {
	deleteGlobalMeta(input: { key: $key }) {
		clientMutationId
	}
}

mutation setMangaMeta($value: String!, $id: Int!, $key: String!) {
	setMangaMeta(input: { meta: { key: $key, mangaId: $id, value: $value } }) {
		meta {
			manga {
				meta {
					key
					mangaId
					value
				}
				id
			}
		}
	}
}

mutation deleteMangaMeta($id: Int!, $key: String!) {
	deleteMangaMeta(input: { key: $key, mangaId: $id }) {
		manga {
			id
			meta {
				key
				value
			}
		}
	}
}

mutation fetchMangaInfo($id: Int!) {
	fetchManga(input: { id: $id }) {
		manga {
			...MangaTypeFragment
		}
	}
}

mutation fetchMangaChapters($id: Int!) {
	fetchChapters(input: { mangaId: $id }) {
		chapters {
			...ChapterTypeFragment
		}
	}
}

mutation updateExtension(
	$pkgName: String!
	$install: Boolean = null
	$uninstall: Boolean = null
	$update: Boolean = null
) {
	updateExtension(
		input: { id: $pkgName, patch: { install: $install, uninstall: $uninstall, update: $update } }
	) {
		extension {
			...ExtensionTypeFragment
			source {
				nodes {
					...SourceTypeFragment
					isNsfw
					extension {
						pkgName
						repo
					}
				}
			}
		}
	}
}

mutation fetchSourceManga(
	$page: Int!
	$source: LongString!
	$type: FetchSourceMangaType!
	$query: String
	$filters: [FilterChangeInput!]
) {
	fetchSourceManga(
		input: { page: $page, source: $source, type: $type, query: $query, filters: $filters }
	) {
		hasNextPage
		mangas {
			id
			title
			inLibrary
			thumbnailUrl
		}
	}
}

mutation updateSourcePreference(
	$position: Int!
	$source: LongString!
	$multiSelectState: [String!] = null
	$listState: String = null
	$editTextState: String = null
	$switchState: Boolean = null
	$checkBoxState: Boolean = null
) {
	updateSourcePreference(
		input: {
			change: {
				position: $position
				multiSelectState: $multiSelectState
				listState: $listState
				editTextState: $editTextState
				checkBoxState: $checkBoxState
				switchState: $switchState
			}
			source: $source
		}
	) {
		clientMutationId
		source {
			id
			preferences {
				... on CheckBoxPreference {
					CheckBoxCheckBoxCurrentValue: currentValue
					summary
					CheckBoxDefault: default
					key
					CheckBoxTitle: title
				}
				... on EditTextPreference {
					EditTextCurrentValue: currentValue
					EditTextDefault: default
					EditTextTitle: title
					text
					summary
					key
					dialogTitle
					dialogMessage
				}
				... on SwitchPreference {
					SwitchCurrentValue: currentValue
					summary
					key
					SwitchDefault: default
					SwitchTitle: title
				}
				... on MultiSelectListPreference {
					dialogMessage
					dialogTitle
					MultiSelectListTitle: title
					summary
					key
					entryValues
					entries
					MultiSelectListDefault: default
					MultiSelectListCurrentValue: currentValue
				}
				... on ListPreference {
					ListCurrentValue: currentValue
					ListDefault: default
					ListTitle: title
					summary
					key
					entryValues
					entries
				}
			}
		}
	}
}

mutation updateCategoryOrder($id: Int!, $position: Int!) {
	updateCategoryOrder(input: { id: $id, position: $position }) {
		categories {
			...CategoryTypeFragment
		}
	}
}

mutation createCategory(
	$name: String!
	$default: Boolean!
	$includeInDownload: IncludeOrExclude!
	$includeInUpdate: IncludeOrExclude!
) {
	createCategory(
		input: {
			name: $name
			default: $default
			includeInDownload: $includeInDownload
			includeInUpdate: $includeInUpdate
		}
	) {
		category {
			...CategoryTypeFragment
		}
	}
}

mutation deleteCategory($categoryId: Int!) {
	deleteCategory(input: { categoryId: $categoryId }) {
		category {
			...CategoryTypeFragment
		}
	}
}

mutation updateCategory(
	$id: Int!
	$name: String = null
	$default: Boolean = null
	$includeInDownload: IncludeOrExclude = null
	$includeInUpdate: IncludeOrExclude = null
) {
	updateCategory(
		input: {
			id: $id
			patch: {
				default: $default
				name: $name
				includeInDownload: $includeInDownload
				includeInUpdate: $includeInUpdate
			}
		}
	) {
		category {
			...CategoryTypeFragment
		}
	}
}

mutation updateMangasCategories($addTo: [Int!] = null, $clear: Boolean = null, $id: [Int!]!) {
	updateMangasCategories(
		input: { ids: $id, patch: { addToCategories: $addTo, clearCategories: $clear } }
	) {
		mangas {
			id
			categories {
				nodes {
					id
				}
			}
		}
	}
}

mutation updateMangaCategories($addTo: [Int!] = null, $clear: Boolean = null, $id: Int!) {
	updateMangaCategories(
		input: { id: $id, patch: { addToCategories: $addTo, clearCategories: $clear } }
	) {
		manga {
			id
			categories {
				nodes {
					id
				}
			}
		}
	}
}

mutation fetchChapterPages($chapterId: Int!) {
	fetchChapterPages(input: { chapterId: $chapterId }) {
		pages
	}
}

mutation ChaptersMigration(
	$ids: [Int!]!
	$lastPageRead: Int = null
	$isRead: Boolean = null
	$isBookmarked: Boolean = null
) {
	updateChapters(
		input: {
			ids: $ids
			patch: { isBookmarked: $isBookmarked, isRead: $isRead, lastPageRead: $lastPageRead }
		}
	) {
		clientMutationId
	}
}

mutation fetchChaptersMigration($id: Int!) {
	fetchChapters(input: { mangaId: $id }) {
		chapters {
			id
			chapterNumber
		}
	}
}

mutation createBackup {
	createBackup {
		url
	}
}

mutation restoreBackup($backup: Upload!) {
	restoreBackup(input: { backup: $backup }) {
		status {
			mangaProgress
			state
			totalManga
		}
		id
	}
}

mutation clearDownloader {
	clearDownloader(input: { clientMutationId: "" }) {
		downloadStatus {
			state
		}
	}
}

mutation dequeueChapterDownloads($ids: [Int!]!) {
	dequeueChapterDownloads(input: { ids: $ids }) {
		clientMutationId
	}
}

mutation enqueueChapterDownloads($ids: [Int!]!) {
	enqueueChapterDownloads(input: { ids: $ids }) {
		clientMutationId
	}
}

mutation reorderChapterDownload($chapterId: Int!, $to: Int!) {
	reorderChapterDownload(input: { chapterId: $chapterId, to: $to }) {
		clientMutationId
	}
}

mutation startDownloader {
	startDownloader(input: { clientMutationId: "" }) {
		downloadStatus {
			state
		}
	}
}

mutation stopDownloader {
	stopDownloader(input: { clientMutationId: "" }) {
		downloadStatus {
			state
		}
	}
}

mutation deleteDownloadedChapter($id: Int!) {
	deleteDownloadedChapter(input: { id: $id }) {
		chapters {
			...ChapterTypeFragment
		}
	}
}

mutation deleteDownloadedChapters($ids: [Int!]!) {
	deleteDownloadedChapters(input: { ids: $ids }) {
		chapters {
			...ChapterTypeFragment
		}
	}
}

mutation clearCachedImages {
	clearCachedImages(
		input: { cachedPages: true, cachedThumbnails: true, downloadedThumbnails: true }
	) {
		clientMutationId
	}
}

mutation installExternalExtension($extensionFile: Upload!) {
	installExternalExtension(input: { extensionFile: $extensionFile }) {
		extension {
			...ExtensionTypeFragment
			source {
				nodes {
					...SourceTypeFragment
					isNsfw
					extension {
						pkgName
						repo
					}
				}
			}
		}
	}
}

mutation loginTrackerOAuth($callbackUrl: String!, $trackerId: Int!) {
	loginTrackerOAuth(input: { callbackUrl: $callbackUrl, trackerId: $trackerId }) {
		isLoggedIn
		tracker {
			...TrackerTypeFragment
		}
	}
}

mutation logoutTracker($trackerId: Int!) {
	logoutTracker(input: { trackerId: $trackerId }) {
		isLoggedIn
		tracker {
			...TrackerTypeFragment
		}
	}
}

mutation loginTrackerCredentials($password: String!, $trackerId: Int!, $username: String!) {
	loginTrackerCredentials(
		input: { password: $password, trackerId: $trackerId, username: $username }
	) {
		tracker {
			...TrackerTypeFragment
		}
	}
}

mutation bindTrack($mangaId: Int!, $remoteId: LongString!, $trackerId: Int!) {
	bindTrack(input: { mangaId: $mangaId, remoteId: $remoteId, trackerId: $trackerId }) {
		trackRecord {
			...TrackRecordTypeFragment
		}
	}
}

mutation updateTrack($input: UpdateTrackInput!) {
	updateTrack(input: $input) {
		trackRecord {
			...TrackRecordTypeFragment
		}
	}
}
